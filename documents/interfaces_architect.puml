@startuml
'https://plantuml.com/class-diagram

abstract class Serializable {
  abstract interfaceName: string;
}

class Method extends Serializable {
  interfaceName = "Method";
}

class Element extends Serializable {
  interfaceName = "Element";

  id: Id;

  class?: string;
  stateId?: Id;

  onCreate?: Method[];
  onDestroy?: Method[];
}

class Node extends Serializable {
  interfaceName = "Node";

  parent?: Id;
  childs?: { [key: Id]: boolean };
  element?: Element;
}

class PlaceholderElement extends Element {
  interfaceName = "PlaceholderElement";
}

class DataContainer extends Element {
  interfaceName = "DataContainer";
}

interface RawDataContainer<T> {
  data: T
}

class Response extends Serializable {
  interfaceName = "Response";

  methods: Method[];
}


class InvokeExternalMethod extends Method {
  interfaceName = "InvokeExternalMethod";

  data: Action;
}

class RenderElementMethod extends Method {
  interfaceName = "RenderElementMethod";

  element: Element;
}

class UpdateElementMethod extends Method {
  interfaceName = "UpdateElementMethod";

  id: Id;
  element: Element;
}

class UpdateInListElementMethod extends Method {
  interfaceName = "UpdateInListElementMethod";

  id: Id;
  elements: Element[];
}

class HttpMethod<T> extends Method {
  interfaceName = "HttpMethod";

  before?: Method[];
  after?: Method[];
  url: string;
  requestType: RequestType;
  requestData?: RequestData<T>;
  clientStateId?: string;
  onError?: Method[];
  onSuccess?: Method[];
}

interface HttpMethodRequestBody<RequestDataType, ClientInfoType> {
  elementState?: DataContainer;
  requestData?: RequestData<RequestDataType>;
  clientInfo?: ClientInfo<ClientInfoType>;
}

class NavigateMethod extends Method {
  interfaceName = "NavigateMethod";

  url: string;
}

class LayoutElement extends Element {
  interfaceName = "LayoutElement";

  elements: Element[];
}

class InputElementState extends DataContainer {
  interfaceName = "InputElementState";

  value: string;
}

class InputElement extends Element {
  interfaceName = "InputElement";

  name?: string;
  defaultValue = "";
  placeholder?: string;
  onInputChange?: Method[];
  onEnterKeyPressed?: Method[];
}

@enduml
